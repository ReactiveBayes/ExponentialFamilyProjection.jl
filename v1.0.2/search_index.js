var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = ExponentialFamilyProjection","category":"page"},{"location":"#ExponentialFamilyProjection","page":"Home","title":"ExponentialFamilyProjection","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The ExponentialFamilyProjection.jl package offers a suite of functions for projecting an arbitrary (un-normalized) log probability density function onto a specified member of the exponential family (e.g., Gaussian, Beta, Bernoulli). This is achieved by optimizing the natural parameters of the exponential family member within a defined manifold. The library leverages Manopt.jl for optimization and utilizes ExponentialFamilyManifolds.jl to define the manifolds corresponding to the members of the exponential family.","category":"page"},{"location":"#Projection-parameters","page":"Home","title":"Projection parameters","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"In order to project a log probability density function onto a member of the exponential family, the user first needs to specify projection parameters:","category":"page"},{"location":"","page":"Home","title":"Home","text":"ExponentialFamilyProjection.ProjectionParameters\nExponentialFamilyProjection.DefaultProjectionParameters","category":"page"},{"location":"#ExponentialFamilyProjection.ProjectionParameters","page":"Home","title":"ExponentialFamilyProjection.ProjectionParameters","text":"ProjectionParameters(; kwargs...)\n\nA type to hold the parameters for the projection procedure.  The following parameters are available:\n\nstrategy = ExponentialFamilyProjection.ControlVariateStrategy(): The strategy to use to compute the gradients.\nniterations = 100: The number of iterations for the optimization procedure.\ntolerance = 1e-6: The tolerance for the norm of the gradient.\nstepsize = ConstantStepsize(0.1): The stepsize for the optimization procedure. Accepts stepsizes from Manopt.jl.\nusebuffer = Val(true): Whether to use a buffer for the projection. Must be either Val(true) or Val(false). Disabling buffer can be useful for debugging purposes.\n\n\n\n\n\n","category":"type"},{"location":"#ExponentialFamilyProjection.DefaultProjectionParameters","page":"Home","title":"ExponentialFamilyProjection.DefaultProjectionParameters","text":"DefaultProjectionParameters()\n\nReturn the default parameters for the projection procedure.\n\n\n\n\n\n","category":"constant"},{"location":"","page":"Home","title":"Home","text":"Read more about different optimization strategies here.","category":"page"},{"location":"#Projection-family","page":"Home","title":"Projection family","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"After the parameters have been specified the user can proceed with specifying the projection type (exponential family member), its dimensionality and (optionally) the conditioner.","category":"page"},{"location":"","page":"Home","title":"Home","text":"ExponentialFamilyProjection.ProjectedTo","category":"page"},{"location":"#ExponentialFamilyProjection.ProjectedTo","page":"Home","title":"ExponentialFamilyProjection.ProjectedTo","text":"ProjectedTo(::Type{T}, dims...; conditioner = nothing, parameters = DefaultProjectionParameters)\n\nA specification of a projection to an exponential family distribution.\n\nThe following arguments are required:\n\nType{T}: a type of an exponential family member to project to, e.g. Beta\ndims...: dimensions of the distribution, e.g. 2 for MvNormal\n\nThe following arguments are optional:\n\nconditioner = nothing: a conditioner to use for the projection, not all exponential family members require a conditioner, but some do, e.g. Laplace\nparameters = DefaultProjectionParameters: parameters for the projection procedure\n\njulia> using ExponentialFamily\n\njulia> projected_to = ProjectedTo(Beta)\nProjectedTo(Beta)\n\njulia> projected_to = ProjectedTo(Beta, parameters = ProjectionParameters(niterations = 10))\nProjectedTo(Beta)\n\njulia> projected_to = ProjectedTo(MvNormalMeanCovariance, 2)\nProjectedTo(MvNormalMeanCovariance, dims = 2)\n\njulia> projected_to = ProjectedTo(Laplace, conditioner = 2.0)\nProjectedTo(Laplace, conditioner = 2.0)\n\n\n\n\n\n","category":"type"},{"location":"#Projection","page":"Home","title":"Projection","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The projection is performed by calling the project_to function with the specified ExponentialFamilyProjection.ProjectedTo and log probability density function:","category":"page"},{"location":"","page":"Home","title":"Home","text":"ExponentialFamilyProjection.project_to","category":"page"},{"location":"#ExponentialFamilyProjection.project_to","page":"Home","title":"ExponentialFamilyProjection.project_to","text":"project_to(prj::ProjectedTo, f::F, supplementary...)\n\nProject the function f to the exponential family distribution specified by prj. Additionally supplementary distributions can be provided to project a product of f and supplementary distributions. Note that supplementary distributions must be of the same type and conditioner as the target distribution.\n\njulia> using ExponentialFamily, BayesBase\n\njulia> f = (x) -> logpdf(Beta(30.14, 2.71), x);\n\njulia> prj = ProjectedTo(Beta; parameters = ProjectionParameters(niterations = 500))\nProjectedTo(Beta)\n\njulia> project_to(prj, f) isa ExponentialFamily.Beta\ntrue\n\n\n\n\n\n","category":"function"},{"location":"#opt-strategies","page":"Home","title":"Optimization strategies","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The optimization procedure requires computing the expectation of the gradient to perform gradient descent in the natural parameters space. Currently, the library provides one strategy for computing these expectations:","category":"page"},{"location":"","page":"Home","title":"Home","text":"ExponentialFamilyProjection.ControlVariateStrategy","category":"page"},{"location":"#ExponentialFamilyProjection.ControlVariateStrategy","page":"Home","title":"ExponentialFamilyProjection.ControlVariateStrategy","text":"ControlVariateStrategy(; kwargs...)\n\nA strategy for gradient descent optimization and gradients computations. The following parameters are available:\n\nnsamples = 2000: The number of samples to use for estimates\nseed = 42: The seed for the random number generator\nrng = StableRNG(seed): The random number generator\n\n\n\n\n\n","category":"type"},{"location":"","page":"Home","title":"Home","text":"For high-dimensional distributions, adjusting the default number of samples might be necessary to achieve better performance.","category":"page"},{"location":"#Examples","page":"Home","title":"Examples","text":"","category":"section"},{"location":"#Gaussian-projection","page":"Home","title":"Gaussian projection","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"In this example we project an arbitrary log probability density function onto a Gaussian distribution. The log probability density function is defined using another Gaussian, but it can be any function:","category":"page"},{"location":"","page":"Home","title":"Home","text":"using ExponentialFamilyProjection, ExponentialFamily, BayesBase\nusing Test #hide\nusing Distributions #hide\n\nhiddengaussian = NormalMeanVariance(3.14, 2.71)\ntargetf = (x) -> logpdf(hiddengaussian, x)\nprj = ProjectedTo(NormalMeanVariance)\nresult = project_to(prj, targetf)\n@test kldivergence(result, hiddengaussian) < 1e-3 #hide\nresult #hide","category":"page"},{"location":"","page":"Home","title":"Home","text":"We can see that the estimated result is pretty close to the actual hiddengaussian used to define the targetf. We can also visualise the results using the Plots.jl package.","category":"page"},{"location":"","page":"Home","title":"Home","text":"using Plots\n\nplot(-6.0:0.1:12.0, x -> pdf(hiddengaussian, x), label=\"real distribution\", fill = 0, fillalpha = 0.2)\nplot!(-6.0:0.1:12.0, x -> pdf(result, x), label=\"estimated projection\", fill = 0, fillalpha = 0.2)","category":"page"},{"location":"","page":"Home","title":"Home","text":"Let's also try to project an arbitrary unnormalized log probability density function onto a Gaussian distribution:","category":"page"},{"location":"","page":"Home","title":"Home","text":"# `+ 100` to ensure that the function is unnormalized\ntargetf = (x) -> -0.5 * (x - 3.14)^2 + 100\n\nresult = project_to(prj, targetf)","category":"page"},{"location":"","page":"Home","title":"Home","text":"In this case, targetf does not define any valid probability distribution since it is unnormalized, but the project_to function is able to project it onto a closest possible Gaussian distribution. We can again visualize the results using the Plots.jl package:","category":"page"},{"location":"","page":"Home","title":"Home","text":"plot(-40.0:0.1:40.0, targetf, label=\"unnormalized logpdf\", fill = 0, fillalpha = 0.2)\nplot!(-40.0:0.1:40.0, (x) -> logpdf(result, x), label=\"estimated logpdf of a Gaussian\", fill = 0, fillalpha = 0.2)","category":"page"},{"location":"#Beta-projection","page":"Home","title":"Beta projection","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The experiment can be performed for other members of the exponential family as well. For example, let's project an arbitrary log probability density function onto a Beta distribution:","category":"page"},{"location":"","page":"Home","title":"Home","text":"hiddenbeta = Beta(10, 3)\ntargetf = (x) -> logpdf(hiddenbeta, x)\nprj = ProjectedTo(Beta)\nresult = project_to(prj, targetf)\n@test kldivergence(result, hiddenbeta) < 1e-2 #hide\nresult #hide","category":"page"},{"location":"","page":"Home","title":"Home","text":"And let's visualize the result using the Plots.jl package:","category":"page"},{"location":"","page":"Home","title":"Home","text":"plot(0.0:0.01:1.0, x -> pdf(hiddenbeta, x), label=\"real distribution\", fill = 0, fillalpha = 0.2)\nplot!(0.0:0.01:1.0, x -> pdf(result, x), label=\"estimated projection\", fill = 0, fillalpha = 0.2)","category":"page"},{"location":"#Multivariate-Gaussian-projection","page":"Home","title":"Multivariate Gaussian projection","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The library also supports multivariate distributions. Let's project an arbitrary log probability density function onto a multivariate Gaussian distribution.","category":"page"},{"location":"","page":"Home","title":"Home","text":"hiddengaussian = MvNormalMeanCovariance(\n    [ 3.14, 2.17 ],\n    [ 2.0 -0.1; -0.1 3.0 ]\n)\ntargetf = (x) -> logpdf(hiddengaussian, x)\nprj = ProjectedTo(MvNormalMeanCovariance, 2)\nresult = project_to(prj, targetf)\n@test kldivergence(result, hiddengaussian) < 1e-2 #hide\nresult #hide","category":"page"},{"location":"","page":"Home","title":"Home","text":"As in previous examples the result is pretty close to the actual hiddengaussian used to define the targetf. ","category":"page"},{"location":"#Index","page":"Home","title":"Index","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"","category":"page"}]
}
